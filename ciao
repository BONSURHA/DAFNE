import cv2
import numpy as np
def voronoi_image(url):
    input_image = input_image = download_image_from_url(url)
    height, width, _ = input_image.shape
    centers = generate_random_centers(width, height)
    vor, centers_image = compute_voronoi_with_centers(width, height, centers)
    fragments = []
    for idx, region in enumerate(vor.regions):
        if -1 in region or not region:
            continue
        polygon = [vor.vertices[i] for i in region]
        mask = np.zeros((height, width), dtype=np.uint8)
        pts = np.array(polygon, np.int32)
        pts = pts.reshape((-1, 1, 2))
        cv2.fillConvexPoly(mask, pts, (255, 255, 255))
        fragment = cv2.bitwise_and(input_image, input_image, mask=mask)
        min_x = max(0, int(min(point[0] for point in polygon)))
        max_x = min(width - 1, int(max(point[0] for point in polygon)))
        min_y = max(0, int(min(point[1] for point in polygon)))
        max_y = min(height - 1, int(max(point[1] for point in polygon)))
        # Ritaglia l'immagine del frammento alle dimensioni del frammento stesso
        fragment_cropped = fragment[min_y:max_y + 1, min_x:max_x + 1]
        # Riempi l'immagine del frammento con un colore diverso
        cv2.floodFill(fragment_cropped