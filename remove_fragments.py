import os
import sys
import random
import shutil
import argparse
import io_tools
from PIL import Image
import riconstruct_image




# farlo relativo all'immagine -> farlo in uno script a parte e faccio salvare eliminando i frammenti, (provare ad aggiungere gli spuri, cartella in input, opzionale), pulendo il file in resources
def random_fragments_removal(seed, input_directory, output_directory, percentage, original_image):

    sys.stderr.write(f'\r\nremoving {percentage}% fragments\n')
    # input directories
    random.seed(seed)
    resources_path = os.path.join(input_directory, "resources")
    fragment_path = os.path.join(input_directory, "fragments")

    # creation output directory
    name = f"remove_{io_tools.image_name(original_image)}"
    path, output_resources_path, output_fragment_path = io_tools.create_folder(name, output_directory)


    info = io_tools.read_info_file(resources_path)

    img_extension = ['.jpg', '.jpeg', '.png']
    fragments_to_remove = random.sample(list(info.keys()), int((len(info))*(percentage/100)))

    for filename in os.listdir(fragment_path):
        file_path = os.path.join(fragment_path, filename)
        name = io_tools.image_name(file_path)
        if os.path.isfile(file_path) is not None and filename.endswith(tuple(img_extension)):
            if not(name in fragments_to_remove):
                shutil.copy(file_path, output_fragment_path)

    num_fragments = io_tools.rewrite_info(fragments_to_remove, info, output_resources_path)
    sys.stderr.write(f'\rdone\n')
    riconstruct_image.image_ricostruction(original_image, path)

    return path, num_fragments


def add_spurius_fragments(path, spurius_path, num_spurius_fragments, num_fragments):

    this_num_spurius = random.randint(1, num_spurius_fragments)
    sys.stderr.write(f'\r\nadd {this_num_spurius} spurius fragments\n')
    fragments = []
    name_used = []
    fragments_path = os.path.join(path, "fragments")
    resources_path = os.path.join(path, "resources")

    spurius_path_fragments = os.path.join(spurius_path, "fragments")

    img_extension = ['.jpg', '.jpeg', '.png']

    for filename in os.listdir(spurius_path_fragments):
        if filename.endswith(tuple(img_extension)):
            fragments.append(os.path.join(spurius_path_fragments, filename))


    spurius_fragments = random.sample(fragments, this_num_spurius)
    for i, spurius_fragments in enumerate(spurius_fragments):
        name = f"fragment_{num_fragments+i+1}"
        name_used.append(name)
        image = Image.open(spurius_fragments)
        file_path = os.path.join(fragments_path, f"{name}.png")
        image.save(file_path, 'PNG')


    
    with open(f"{resources_path}/spurius_info.txt", "a") as info_file:
        info_file.write(f"num_spurius: {this_num_spurius}\n")
        for name in name_used:
            info_file.write(f"name_spurius: {name}\n")
    sys.stderr.write(f'\rdone\n')


def generate_info(resources_path, seed, removal_percentage, num_spurius):
    with open(f"{resources_path}/removal_info.txt", "a") as info_file:
        info_file.write(f"seed: {seed}\n")
        info_file.write(f"removal_percentage: {removal_percentage}\n")
        info_file.write(f"num_spurius: {num_spurius}\n")

    
def main():

    # default values 
    seed = 54321
    removal_percentage = 22.5
    num_spurius = 0
    output_directory = os.path.dirname(os.path.abspath(__file__))
    #


    parser = argparse.ArgumentParser(description='Removes fragments and, if required, adds spurious fragments')
    parser.add_argument('input_directory', type=str, help='Path to the input folder generated by DAFNE, the outermost one')
    parser.add_argument('original_image', type=str, help='Path of the image from which the fragments were obtained')
    parser.add_argument('--output_directory', type=str, help='Output folder path', required= False)
    parser.add_argument('--file_path', type=str, help='Path to input text file, if not specified there are default values', required= False)
    parser.add_argument('--spurius_directory', type=str, help='Path to the folder generated by DAFNE, the outermost one, in order to derive the spurious fragments', required= False)
   

    args = parser.parse_args()

    input_directory = args.input_directory
    original_image = args.original_image


    if args.output_directory is not None:
        output_directory = args.output_directory
    

    if args.file_path is not None:
        input_data = io_tools.read_input_from_file(args.file_path)
        seed = int(input_data.get("seed"))
        removal_percentage = float(input_data.get("removal_percentage"))
        if "num_spurius" in input_data:
            num_spurius = int(input_data.get("num_spurius"))


    path, num_fragments = random_fragments_removal(seed, input_directory, output_directory, removal_percentage, original_image)

    if num_spurius !=0 and args.spurius_directory is not None:
        spurius_directory = args.spurius_directory
        add_spurius_fragments(path, spurius_directory, num_spurius, num_fragments)
    else:
        sys.stderr.write('\r\nskip spurious operation\n')
        sys.stderr.write('\rparameter missing: need "num_spurius", int > 0, in the text file and folder to select the spurious\n')



if __name__ == "__main__":
    main()