import os
import sys
import io_tools
import argparse
import riconstruct_image
import remove_fragments
import fragmentation_erosion


def main():

    # default values 
    seed = 1000
    num_fragments = 500
    min_distance = 6
    erosion_probability = 0.6
    erosion_percentage = 20  
    removal_percentage = 0
    num_spurius = 0
    output_directory = os.path.dirname(os.path.abspath(__file__))
    #

    parser = argparse.ArgumentParser(description='takes an image to generate a dataset of fragments using paramenters provided by the input text file')
    parser.add_argument('input_directory', type=str, help='path to the input folder that contains the images')
    parser.add_argument('--output_directory', type=str, help='Output folder path', required= False)
    parser.add_argument('--file_path', type=str, help='Path to input text file, if not specified there are default values', required= False)
    parser.add_argument('--spurius_directory', type=str, help='Path to the folder generated by DAFNE, the outermost one, in order to derive the spurious fragments', required= False)

    args = parser.parse_args()

    input_directory = args.input_directory
    
    if args.output_directory is not None:
        output_directory = args.output_directory


    if args.file_path is not None and os.path.exists(args.file_path):
        input_data = io_tools.read_input_from_file(args.file_path)
        seed = int(input_data.get("seed"))
        num_fragments = int(input_data.get("num_fragments"))
        min_distance = int(input_data.get("min_distance"))
        erosion_probability = float(input_data.get("erosion_probability"))
        erosion_percentage = float(input_data.get("erosion_percentage"))
        if "removal_percentage" in input_data:
            removal_percentage = float(input_data.get("removal_percentage"))
        if "num_spurius" in input_data:
            num_spurius = float(input_data.get("num_spurius"))
            

    img_extension = ['.jpg', '.jpeg', '.png']

    for filename in os.listdir(input_directory):
        file_path = os.path.join(input_directory, filename)
        if os.path.isfile(file_path) is not None and filename.endswith(tuple(img_extension)):
            path = fragmentation_erosion.generate_fragments(file_path, output_directory, num_fragments, min_distance, seed, erosion_probability, erosion_percentage)
            riconstruct_image.image_ricostruction(file_path, path)

            if removal_percentage != 0:
                removal_path, n_fragments = remove_fragments.random_fragments_removal(seed, path, output_directory, erosion_percentage, file_path)
            else:
                sys.stderr.write('\r\nskip fragments removal\n')
                sys.stderr.write('\rparameter missing: need "removal_percentage", float > 0, in the text file\n')
                
            if num_spurius !=0 and args.spurius_directory is not None:
                spurius_directory = args.spurius_directory
                remove_fragments.add_spurius_fragments(removal_path, spurius_directory, num_spurius, n_fragments)
            else:
                sys.stderr.write('\r\nskip spurious operation\n')
                sys.stderr.write('\rparameter missing: "need num_spurius", int > 0, in the text file and folder to select the spurious\n')

            

    sys.stderr.write('\rdatset ready.\n')


if __name__ == "__main__":
    main()